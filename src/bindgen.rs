#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen */

pub type size_t = ::libc::c_ulong;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed1;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type FILE = Struct__IO_FILE;
pub type __FILE = Struct__IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed3,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed3 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed3 {
    pub unsafe fn __wch(&mut self) -> *mut ::libc::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::libc::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _G_fpos64_t = Struct_Unnamed5;
pub type __gnuc_va_list = __builtin_va_list;
pub enum Struct__IO_jump_t { }
pub type _IO_lock_t = ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_marker {
    pub _next: *mut Struct__IO_marker,
    pub _sbuf: *mut Struct__IO_FILE,
    pub _pos: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__IO_marker {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum___codecvt_result = ::libc::c_uint;
pub const __codecvt_ok: ::libc::c_uint = 0;
pub const __codecvt_partial: ::libc::c_uint = 1;
pub const __codecvt_error: ::libc::c_uint = 2;
pub const __codecvt_noconv: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__IO_FILE {
    pub _flags: ::libc::c_int,
    pub _IO_read_ptr: *mut ::libc::c_char,
    pub _IO_read_end: *mut ::libc::c_char,
    pub _IO_read_base: *mut ::libc::c_char,
    pub _IO_write_base: *mut ::libc::c_char,
    pub _IO_write_ptr: *mut ::libc::c_char,
    pub _IO_write_end: *mut ::libc::c_char,
    pub _IO_buf_base: *mut ::libc::c_char,
    pub _IO_buf_end: *mut ::libc::c_char,
    pub _IO_save_base: *mut ::libc::c_char,
    pub _IO_backup_base: *mut ::libc::c_char,
    pub _IO_save_end: *mut ::libc::c_char,
    pub _markers: *mut Struct__IO_marker,
    pub _chain: *mut Struct__IO_FILE,
    pub _fileno: ::libc::c_int,
    pub _flags2: ::libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::libc::c_ushort,
    pub _vtable_offset: ::libc::c_char,
    pub _shortbuf: [::libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::libc::c_void,
    pub __pad2: *mut ::libc::c_void,
    pub __pad3: *mut ::libc::c_void,
    pub __pad4: *mut ::libc::c_void,
    pub __pad5: size_t,
    pub _mode: ::libc::c_int,
    pub _unused2: [::libc::c_char; 20usize],
}
impl ::std::clone::Clone for Struct__IO_FILE {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type _IO_FILE = Struct__IO_FILE;
pub enum Struct__IO_FILE_plus { }
pub type __io_read_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *mut ::libc::c_char,
                  __nbytes: size_t) -> __ssize_t;
pub type __io_write_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __buf: *const ::libc::c_char,
                  __n: size_t) -> __ssize_t;
pub type __io_seek_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void, __pos: *mut __off64_t,
                  __w: ::libc::c_int) -> ::libc::c_int;
pub type __io_close_fn =
    extern "C" fn(__cookie: *mut ::libc::c_void) -> ::libc::c_int;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = _G_fpos_t;
pub type jint = ::libc::c_int;
pub type jlong = ::libc::c_long;
pub type jbyte = ::libc::c_char;
pub type jboolean = ::libc::c_uchar;
pub type jchar = ::libc::c_ushort;
pub type jshort = ::libc::c_short;
pub type jfloat = ::libc::c_float;
pub type jdouble = ::libc::c_double;
pub type jsize = jint;
pub enum Struct__jobject { }
pub type jobject = *mut Struct__jobject;
pub type jclass = jobject;
pub type jthrowable = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jobjectArray = jarray;
pub type jweak = jobject;
#[repr(C)]
#[derive(Copy)]
pub struct Union_jvalue {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_jvalue {
    pub unsafe fn z(&mut self) -> *mut jboolean {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut jbyte {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut jchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut jshort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut jint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn j(&mut self) -> *mut jlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut jfloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut jdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut jobject {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_jvalue {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_jvalue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jvalue = Union_jvalue;
pub enum Struct__jfieldID { }
pub type jfieldID = *mut Struct__jfieldID;
pub enum Struct__jmethodID { }
pub type jmethodID = *mut Struct__jmethodID;
pub type Enum__jobjectType = ::libc::c_uint;
pub const JNIInvalidRefType: ::libc::c_uint = 0;
pub const JNILocalRefType: ::libc::c_uint = 1;
pub const JNIGlobalRefType: ::libc::c_uint = 2;
pub const JNIWeakGlobalRefType: ::libc::c_uint = 3;
pub type jobjectRefType = Enum__jobjectType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub name: *mut ::libc::c_char,
    pub signature: *mut ::libc::c_char,
    pub fnPtr: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JNINativeMethod = Struct_Unnamed6;
pub type JNIEnv = *const Struct_JNINativeInterface_;
pub type JavaVM = *const Struct_JNIInvokeInterface_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JNINativeInterface_ {
    pub reserved0: *mut ::libc::c_void,
    pub reserved1: *mut ::libc::c_void,
    pub reserved2: *mut ::libc::c_void,
    pub reserved3: *mut ::libc::c_void,
    pub GetVersion: ::std::option::Option<extern "C" fn(env: *mut JNIEnv)
                                              -> jint>,
    pub DefineClass: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         name:
                                                             *const ::libc::c_char,
                                                         loader: jobject,
                                                         buf: *const jbyte,
                                                         len: jsize)
                                               -> jclass>,
    pub FindClass: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                       name:
                                                           *const ::libc::c_char)
                                             -> jclass>,
    pub FromReflectedMethod: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 method:
                                                                     jobject)
                                                       -> jmethodID>,
    pub FromReflectedField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                field:
                                                                    jobject)
                                                      -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               cls: jclass,
                                                               methodID:
                                                                   jmethodID,
                                                               isStatic:
                                                                   jboolean)
                                                     -> jobject>,
    pub GetSuperclass: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           sub: jclass)
                                                 -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              sub: jclass,
                                                              sup: jclass)
                                                    -> jboolean>,
    pub ToReflectedField: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              cls: jclass,
                                                              fieldID:
                                                                  jfieldID,
                                                              isStatic:
                                                                  jboolean)
                                                    -> jobject>,
    pub Throw: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                   obj: jthrowable) -> jint>,
    pub ThrowNew: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                      clazz: jclass,
                                                      msg:
                                                          *const ::libc::c_char)
                                            -> jint>,
    pub ExceptionOccurred: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv)
                                                     -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv)
                                                     -> ()>,
    pub ExceptionClear: ::std::option::Option<extern "C" fn(env: *mut JNIEnv)
                                                  -> ()>,
    pub FatalError: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                        msg:
                                                            *const ::libc::c_char)
                                              -> ()>,
    pub PushLocalFrame: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            capacity: jint)
                                                  -> jint>,
    pub PopLocalFrame: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           result: jobject)
                                                 -> jobject>,
    pub NewGlobalRef: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          lobj: jobject)
                                                -> jobject>,
    pub DeleteGlobalRef: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             gref: jobject)
                                                   -> ()>,
    pub DeleteLocalRef: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject)
                                                  -> ()>,
    pub IsSameObject: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj1: jobject,
                                                          obj2: jobject)
                                                -> jboolean>,
    pub NewLocalRef: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         _ref: jobject)
                                               -> jobject>,
    pub EnsureLocalCapacity: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 capacity:
                                                                     jint)
                                                       -> jint>,
    pub AllocObject: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         clazz: jclass)
                                               -> jobject>,
    pub NewObject: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                       clazz: jclass,
                                                       methodID:
                                                           jmethodID, ...)
                                             -> jobject>,
    pub NewObjectV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                        clazz: jclass,
                                                        methodID: jmethodID,
                                                        args: va_list)
                                              -> jobject>,
    pub NewObjectA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                        clazz: jclass,
                                                        methodID: jmethodID,
                                                        args: *const jvalue)
                                              -> jobject>,
    pub GetObjectClass: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject)
                                                  -> jclass>,
    pub IsInstanceOf: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          clazz: jclass)
                                                -> jboolean>,
    pub GetMethodID: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         clazz: jclass,
                                                         name:
                                                             *const ::libc::c_char,
                                                         sig:
                                                             *const ::libc::c_char)
                                               -> jmethodID>,
    pub CallObjectMethod: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID, ...)
                                                    -> jobject>,
    pub CallObjectMethodV: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               obj: jobject,
                                                               methodID:
                                                                   jmethodID,
                                                               args: va_list)
                                                     -> jobject>,
    pub CallObjectMethodA: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               obj: jobject,
                                                               methodID:
                                                                   jmethodID,
                                                               args:
                                                                   *const jvalue)
                                                     -> jobject>,
    pub CallBooleanMethod: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               obj: jobject,
                                                               methodID:
                                                                   jmethodID, ...)
                                                     -> jboolean>,
    pub CallBooleanMethodV: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                obj: jobject,
                                                                methodID:
                                                                    jmethodID,
                                                                args: va_list)
                                                      -> jboolean>,
    pub CallBooleanMethodA: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                obj: jobject,
                                                                methodID:
                                                                    jmethodID,
                                                                args:
                                                                    *const jvalue)
                                                      -> jboolean>,
    pub CallByteMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID, ...)
                                                  -> jbyte>,
    pub CallByteMethodV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args: va_list)
                                                   -> jbyte>,
    pub CallByteMethodA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args:
                                                                 *const jvalue)
                                                   -> jbyte>,
    pub CallCharMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID, ...)
                                                  -> jchar>,
    pub CallCharMethodV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args: va_list)
                                                   -> jchar>,
    pub CallCharMethodA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args:
                                                                 *const jvalue)
                                                   -> jchar>,
    pub CallShortMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID, ...)
                                                   -> jshort>,
    pub CallShortMethodV: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID,
                                                              args: va_list)
                                                    -> jshort>,
    pub CallShortMethodA: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID,
                                                              args:
                                                                  *const jvalue)
                                                    -> jshort>,
    pub CallIntMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           obj: jobject,
                                                           methodID:
                                                               jmethodID, ...)
                                                 -> jint>,
    pub CallIntMethodV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID,
                                                            args: va_list)
                                                  -> jint>,
    pub CallIntMethodA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID,
                                                            args:
                                                                *const jvalue)
                                                  -> jint>,
    pub CallLongMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID, ...)
                                                  -> jlong>,
    pub CallLongMethodV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args: va_list)
                                                   -> jlong>,
    pub CallLongMethodA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args:
                                                                 *const jvalue)
                                                   -> jlong>,
    pub CallFloatMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID, ...)
                                                   -> jfloat>,
    pub CallFloatMethodV: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID,
                                                              args: va_list)
                                                    -> jfloat>,
    pub CallFloatMethodA: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID,
                                                              args:
                                                                  *const jvalue)
                                                    -> jfloat>,
    pub CallDoubleMethod: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject,
                                                              methodID:
                                                                  jmethodID, ...)
                                                    -> jdouble>,
    pub CallDoubleMethodV: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               obj: jobject,
                                                               methodID:
                                                                   jmethodID,
                                                               args: va_list)
                                                     -> jdouble>,
    pub CallDoubleMethodA: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               obj: jobject,
                                                               methodID:
                                                                   jmethodID,
                                                               args:
                                                                   *const jvalue)
                                                     -> jdouble>,
    pub CallVoidMethod: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            methodID:
                                                                jmethodID, ...)
                                                  -> ()>,
    pub CallVoidMethodV: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args: va_list)
                                                   -> ()>,
    pub CallVoidMethodA: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             methodID:
                                                                 jmethodID,
                                                             args:
                                                                 *const jvalue)
                                                   -> ()>,
    pub CallNonvirtualObjectMethod: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID, ...)
                                                              -> jobject>,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             va_list)
                                                               -> jobject>,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             *const jvalue)
                                                               -> jobject>,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                               -> jboolean>,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                                -> jboolean>,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          obj:
                                                                              jobject,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                                -> jboolean>,
    pub CallNonvirtualByteMethod: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                            -> jbyte>,
    pub CallNonvirtualByteMethodV: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                             -> jbyte>,
    pub CallNonvirtualByteMethodA: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                             -> jbyte>,
    pub CallNonvirtualCharMethod: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                            -> jchar>,
    pub CallNonvirtualCharMethodV: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                             -> jchar>,
    pub CallNonvirtualCharMethodA: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                             -> jchar>,
    pub CallNonvirtualShortMethod: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                             -> jshort>,
    pub CallNonvirtualShortMethodV: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                              -> jshort>,
    pub CallNonvirtualShortMethodA: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                              -> jshort>,
    pub CallNonvirtualIntMethod: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID, ...)
                                                           -> jint>,
    pub CallNonvirtualIntMethodV: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          va_list)
                                                            -> jint>,
    pub CallNonvirtualIntMethodA: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          *const jvalue)
                                                            -> jint>,
    pub CallNonvirtualLongMethod: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                            -> jlong>,
    pub CallNonvirtualLongMethodV: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                             -> jlong>,
    pub CallNonvirtualLongMethodA: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                             -> jlong>,
    pub CallNonvirtualFloatMethod: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID, ...)
                                                             -> jfloat>,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            va_list)
                                                              -> jfloat>,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID,
                                                                        args:
                                                                            *const jvalue)
                                                              -> jfloat>,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        obj:
                                                                            jobject,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID, ...)
                                                              -> jdouble>,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             va_list)
                                                               -> jdouble>,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         obj:
                                                                             jobject,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             *const jvalue)
                                                               -> jdouble>,
    pub CallNonvirtualVoidMethod: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                            -> ()>,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                             -> ()>,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       clazz:
                                                                           jclass,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                             -> ()>,
    pub GetFieldID: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                        clazz: jclass,
                                                        name:
                                                            *const ::libc::c_char,
                                                        sig:
                                                            *const ::libc::c_char)
                                              -> jfieldID>,
    pub GetObjectField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            fieldID: jfieldID)
                                                  -> jobject>,
    pub GetBooleanField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             fieldID:
                                                                 jfieldID)
                                                   -> jboolean>,
    pub GetByteField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID)
                                                -> jbyte>,
    pub GetCharField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID)
                                                -> jchar>,
    pub GetShortField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           obj: jobject,
                                                           fieldID: jfieldID)
                                                 -> jshort>,
    pub GetIntField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         obj: jobject,
                                                         fieldID: jfieldID)
                                               -> jint>,
    pub GetLongField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID)
                                                -> jlong>,
    pub GetFloatField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           obj: jobject,
                                                           fieldID: jfieldID)
                                                 -> jfloat>,
    pub GetDoubleField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            fieldID: jfieldID)
                                                  -> jdouble>,
    pub SetObjectField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            fieldID: jfieldID,
                                                            val: jobject)
                                                  -> ()>,
    pub SetBooleanField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             obj: jobject,
                                                             fieldID:
                                                                 jfieldID,
                                                             val: jboolean)
                                                   -> ()>,
    pub SetByteField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID,
                                                          val: jbyte) -> ()>,
    pub SetCharField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID,
                                                          val: jchar) -> ()>,
    pub SetShortField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           obj: jobject,
                                                           fieldID: jfieldID,
                                                           val: jshort)
                                                 -> ()>,
    pub SetIntField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         obj: jobject,
                                                         fieldID: jfieldID,
                                                         val: jint) -> ()>,
    pub SetLongField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject,
                                                          fieldID: jfieldID,
                                                          val: jlong) -> ()>,
    pub SetFloatField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           obj: jobject,
                                                           fieldID: jfieldID,
                                                           val: jfloat)
                                                 -> ()>,
    pub SetDoubleField: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            obj: jobject,
                                                            fieldID: jfieldID,
                                                            val: jdouble)
                                                  -> ()>,
    pub GetStaticMethodID: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               name:
                                                                   *const ::libc::c_char,
                                                               sig:
                                                                   *const ::libc::c_char)
                                                     -> jmethodID>,
    pub CallStaticObjectMethod: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID, ...)
                                                          -> jobject>,
    pub CallStaticObjectMethodV: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         va_list)
                                                           -> jobject>,
    pub CallStaticObjectMethodA: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         *const jvalue)
                                                           -> jobject>,
    pub CallStaticBooleanMethod: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID, ...)
                                                           -> jboolean>,
    pub CallStaticBooleanMethodV: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          va_list)
                                                            -> jboolean>,
    pub CallStaticBooleanMethodA: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          *const jvalue)
                                                            -> jboolean>,
    pub CallStaticByteMethod: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                        -> jbyte>,
    pub CallStaticByteMethodV: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       va_list)
                                                         -> jbyte>,
    pub CallStaticByteMethodA: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                         -> jbyte>,
    pub CallStaticCharMethod: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                        -> jchar>,
    pub CallStaticCharMethodV: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       va_list)
                                                         -> jchar>,
    pub CallStaticCharMethodA: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                         -> jchar>,
    pub CallStaticShortMethod: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID, ...)
                                                         -> jshort>,
    pub CallStaticShortMethodV: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)
                                                          -> jshort>,
    pub CallStaticShortMethodA: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)
                                                          -> jshort>,
    pub CallStaticIntMethod: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 clazz:
                                                                     jclass,
                                                                 methodID:
                                                                     jmethodID, ...)
                                                       -> jint>,
    pub CallStaticIntMethodV: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  methodID:
                                                                      jmethodID,
                                                                  args:
                                                                      va_list)
                                                        -> jint>,
    pub CallStaticIntMethodA: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  methodID:
                                                                      jmethodID,
                                                                  args:
                                                                      *const jvalue)
                                                        -> jint>,
    pub CallStaticLongMethod: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                        -> jlong>,
    pub CallStaticLongMethodV: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       va_list)
                                                         -> jlong>,
    pub CallStaticLongMethodA: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                         -> jlong>,
    pub CallStaticFloatMethod: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID, ...)
                                                         -> jfloat>,
    pub CallStaticFloatMethodV: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)
                                                          -> jfloat>,
    pub CallStaticFloatMethodA: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)
                                                          -> jfloat>,
    pub CallStaticDoubleMethod: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methodID:
                                                                        jmethodID, ...)
                                                          -> jdouble>,
    pub CallStaticDoubleMethodV: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         va_list)
                                                           -> jdouble>,
    pub CallStaticDoubleMethodA: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         *const jvalue)
                                                           -> jdouble>,
    pub CallStaticVoidMethod: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  cls: jclass,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                        -> ()>,
    pub CallStaticVoidMethodV: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   cls:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       va_list)
                                                         -> ()>,
    pub CallStaticVoidMethodA: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   cls:
                                                                       jclass,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                         -> ()>,
    pub GetStaticFieldID: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              clazz: jclass,
                                                              name:
                                                                  *const ::libc::c_char,
                                                              sig:
                                                                  *const ::libc::c_char)
                                                    -> jfieldID>,
    pub GetStaticObjectField: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  fieldID:
                                                                      jfieldID)
                                                        -> jobject>,
    pub GetStaticBooleanField: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   fieldID:
                                                                       jfieldID)
                                                         -> jboolean>,
    pub GetStaticByteField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID)
                                                      -> jbyte>,
    pub GetStaticCharField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID)
                                                      -> jchar>,
    pub GetStaticShortField: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 clazz:
                                                                     jclass,
                                                                 fieldID:
                                                                     jfieldID)
                                                       -> jshort>,
    pub GetStaticIntField: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               fieldID:
                                                                   jfieldID)
                                                     -> jint>,
    pub GetStaticLongField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID)
                                                      -> jlong>,
    pub GetStaticFloatField: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 clazz:
                                                                     jclass,
                                                                 fieldID:
                                                                     jfieldID)
                                                       -> jfloat>,
    pub GetStaticDoubleField: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  fieldID:
                                                                      jfieldID)
                                                        -> jdouble>,
    pub SetStaticObjectField: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  fieldID:
                                                                      jfieldID,
                                                                  value:
                                                                      jobject)
                                                        -> ()>,
    pub SetStaticBooleanField: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   clazz:
                                                                       jclass,
                                                                   fieldID:
                                                                       jfieldID,
                                                                   value:
                                                                       jboolean)
                                                         -> ()>,
    pub SetStaticByteField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID,
                                                                value: jbyte)
                                                      -> ()>,
    pub SetStaticCharField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID,
                                                                value: jchar)
                                                      -> ()>,
    pub SetStaticShortField: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 clazz:
                                                                     jclass,
                                                                 fieldID:
                                                                     jfieldID,
                                                                 value:
                                                                     jshort)
                                                       -> ()>,
    pub SetStaticIntField: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               fieldID:
                                                                   jfieldID,
                                                               value: jint)
                                                     -> ()>,
    pub SetStaticLongField: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                fieldID:
                                                                    jfieldID,
                                                                value: jlong)
                                                      -> ()>,
    pub SetStaticFloatField: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 clazz:
                                                                     jclass,
                                                                 fieldID:
                                                                     jfieldID,
                                                                 value:
                                                                     jfloat)
                                                       -> ()>,
    pub SetStaticDoubleField: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  clazz:
                                                                      jclass,
                                                                  fieldID:
                                                                      jfieldID,
                                                                  value:
                                                                      jdouble)
                                                        -> ()>,
    pub NewString: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                       unicode: *const jchar,
                                                       len: jsize)
                                             -> jstring>,
    pub GetStringLength: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             str: jstring)
                                                   -> jsize>,
    pub GetStringChars: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            str: jstring,
                                                            isCopy:
                                                                *mut jboolean)
                                                  -> *const jchar>,
    pub ReleaseStringChars: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                str: jstring,
                                                                chars:
                                                                    *const jchar)
                                                      -> ()>,
    pub NewStringUTF: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          utf:
                                                              *const ::libc::c_char)
                                                -> jstring>,
    pub GetStringUTFLength: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                str: jstring)
                                                      -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               str: jstring,
                                                               isCopy:
                                                                   *mut jboolean)
                                                     ->
                                                         *const ::libc::c_char>,
    pub ReleaseStringUTFChars: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   str:
                                                                       jstring,
                                                                   chars:
                                                                       *const ::libc::c_char)
                                                         -> ()>,
    pub GetArrayLength: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            array: jarray)
                                                  -> jsize>,
    pub NewObjectArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            len: jsize,
                                                            clazz: jclass,
                                                            init: jobject)
                                                  -> jobjectArray>,
    pub GetObjectArrayElement: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jobjectArray,
                                                                   index:
                                                                       jsize)
                                                         -> jobject>,
    pub SetObjectArrayElement: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jobjectArray,
                                                                   index:
                                                                       jsize,
                                                                   val:
                                                                       jobject)
                                                         -> ()>,
    pub NewBooleanArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             len: jsize)
                                                   -> jbooleanArray>,
    pub NewByteArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          len: jsize)
                                                -> jbyteArray>,
    pub NewCharArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          len: jsize)
                                                -> jcharArray>,
    pub NewShortArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           len: jsize)
                                                 -> jshortArray>,
    pub NewIntArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         len: jsize)
                                               -> jintArray>,
    pub NewLongArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          len: jsize)
                                                -> jlongArray>,
    pub NewFloatArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                           len: jsize)
                                                 -> jfloatArray>,
    pub NewDoubleArray: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                            len: jsize)
                                                  -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     array:
                                                                         jbooleanArray,
                                                                     isCopy:
                                                                         *mut jboolean)
                                                           -> *mut jboolean>,
    pub GetByteArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  array:
                                                                      jbyteArray,
                                                                  isCopy:
                                                                      *mut jboolean)
                                                        -> *mut jbyte>,
    pub GetCharArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  array:
                                                                      jcharArray,
                                                                  isCopy:
                                                                      *mut jboolean)
                                                        -> *mut jchar>,
    pub GetShortArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jshortArray,
                                                                   isCopy:
                                                                       *mut jboolean)
                                                         -> *mut jshort>,
    pub GetIntArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 array:
                                                                     jintArray,
                                                                 isCopy:
                                                                     *mut jboolean)
                                                       -> *mut jint>,
    pub GetLongArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  array:
                                                                      jlongArray,
                                                                  isCopy:
                                                                      *mut jboolean)
                                                        -> *mut jlong>,
    pub GetFloatArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jfloatArray,
                                                                   isCopy:
                                                                       *mut jboolean)
                                                         -> *mut jfloat>,
    pub GetDoubleArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    array:
                                                                        jdoubleArray,
                                                                    isCopy:
                                                                        *mut jboolean)
                                                          -> *mut jdouble>,
    pub ReleaseBooleanArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jbooleanArray,
                                                                         elems:
                                                                             *mut jboolean,
                                                                         mode:
                                                                             jint)
                                                               -> ()>,
    pub ReleaseByteArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      array:
                                                                          jbyteArray,
                                                                      elems:
                                                                          *mut jbyte,
                                                                      mode:
                                                                          jint)
                                                            -> ()>,
    pub ReleaseCharArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      array:
                                                                          jcharArray,
                                                                      elems:
                                                                          *mut jchar,
                                                                      mode:
                                                                          jint)
                                                            -> ()>,
    pub ReleaseShortArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jshortArray,
                                                                       elems:
                                                                           *mut jshort,
                                                                       mode:
                                                                           jint)
                                                             -> ()>,
    pub ReleaseIntArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     array:
                                                                         jintArray,
                                                                     elems:
                                                                         *mut jint,
                                                                     mode:
                                                                         jint)
                                                           -> ()>,
    pub ReleaseLongArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      array:
                                                                          jlongArray,
                                                                      elems:
                                                                          *mut jlong,
                                                                      mode:
                                                                          jint)
                                                            -> ()>,
    pub ReleaseFloatArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jfloatArray,
                                                                       elems:
                                                                           *mut jfloat,
                                                                       mode:
                                                                           jint)
                                                             -> ()>,
    pub ReleaseDoubleArrayElements: ::std::option::Option<extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jdoubleArray,
                                                                        elems:
                                                                            *mut jdouble,
                                                                        mode:
                                                                            jint)
                                                              -> ()>,
    pub GetBooleanArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jbooleanArray,
                                                                   start:
                                                                       jsize,
                                                                   l: jsize,
                                                                   buf:
                                                                       *mut jboolean)
                                                         -> ()>,
    pub GetByteArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jbyteArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *mut jbyte)
                                                      -> ()>,
    pub GetCharArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jcharArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *mut jchar)
                                                      -> ()>,
    pub GetShortArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 array:
                                                                     jshortArray,
                                                                 start: jsize,
                                                                 len: jsize,
                                                                 buf:
                                                                     *mut jshort)
                                                       -> ()>,
    pub GetIntArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               array:
                                                                   jintArray,
                                                               start: jsize,
                                                               len: jsize,
                                                               buf: *mut jint)
                                                     -> ()>,
    pub GetLongArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jlongArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *mut jlong)
                                                      -> ()>,
    pub GetFloatArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 array:
                                                                     jfloatArray,
                                                                 start: jsize,
                                                                 len: jsize,
                                                                 buf:
                                                                     *mut jfloat)
                                                       -> ()>,
    pub GetDoubleArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  array:
                                                                      jdoubleArray,
                                                                  start:
                                                                      jsize,
                                                                  len: jsize,
                                                                  buf:
                                                                      *mut jdouble)
                                                        -> ()>,
    pub SetBooleanArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jbooleanArray,
                                                                   start:
                                                                       jsize,
                                                                   l: jsize,
                                                                   buf:
                                                                       *const jboolean)
                                                         -> ()>,
    pub SetByteArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jbyteArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *const jbyte)
                                                      -> ()>,
    pub SetCharArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jcharArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *const jchar)
                                                      -> ()>,
    pub SetShortArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 array:
                                                                     jshortArray,
                                                                 start: jsize,
                                                                 len: jsize,
                                                                 buf:
                                                                     *const jshort)
                                                       -> ()>,
    pub SetIntArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               array:
                                                                   jintArray,
                                                               start: jsize,
                                                               len: jsize,
                                                               buf:
                                                                   *const jint)
                                                     -> ()>,
    pub SetLongArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                array:
                                                                    jlongArray,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *const jlong)
                                                      -> ()>,
    pub SetFloatArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 array:
                                                                     jfloatArray,
                                                                 start: jsize,
                                                                 len: jsize,
                                                                 buf:
                                                                     *const jfloat)
                                                       -> ()>,
    pub SetDoubleArrayRegion: ::std::option::Option<extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  array:
                                                                      jdoubleArray,
                                                                  start:
                                                                      jsize,
                                                                  len: jsize,
                                                                  buf:
                                                                      *const jdouble)
                                                        -> ()>,
    pub RegisterNatives: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             clazz: jclass,
                                                             methods:
                                                                 *const JNINativeMethod,
                                                             nMethods: jint)
                                                   -> jint>,
    pub UnregisterNatives: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass)
                                                     -> jint>,
    pub MonitorEnter: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                          obj: jobject)
                                                -> jint>,
    pub MonitorExit: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                         obj: jobject)
                                               -> jint>,
    pub GetJavaVM: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                       vm: *mut *mut JavaVM)
                                             -> jint>,
    pub GetStringRegion: ::std::option::Option<extern "C" fn(env: *mut JNIEnv,
                                                             str: jstring,
                                                             start: jsize,
                                                             len: jsize,
                                                             buf: *mut jchar)
                                                   -> ()>,
    pub GetStringUTFRegion: ::std::option::Option<extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                str: jstring,
                                                                start: jsize,
                                                                len: jsize,
                                                                buf:
                                                                    *mut ::libc::c_char)
                                                      -> ()>,
    pub GetPrimitiveArrayCritical: ::std::option::Option<extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jarray,
                                                                       isCopy:
                                                                           *mut jboolean)
                                                             ->
                                                                 *mut ::libc::c_void>,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jarray,
                                                                           carray:
                                                                               *mut ::libc::c_void,
                                                                           mode:
                                                                               jint)
                                                                 -> ()>,
    pub GetStringCritical: ::std::option::Option<extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               string:
                                                                   jstring,
                                                               isCopy:
                                                                   *mut jboolean)
                                                     -> *const jchar>,
    pub ReleaseStringCritical: ::std::option::Option<extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   string:
                                                                       jstring,
                                                                   cstring:
                                                                       *const jchar)
                                                         -> ()>,
    pub NewWeakGlobalRef: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject)
                                                    -> jweak>,
    pub DeleteWeakGlobalRef: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 _ref: jweak)
                                                       -> ()>,
    pub ExceptionCheck: ::std::option::Option<extern "C" fn(env: *mut JNIEnv)
                                                  -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 address:
                                                                     *mut ::libc::c_void,
                                                                 capacity:
                                                                     jlong)
                                                       -> jobject>,
    pub GetDirectBufferAddress: ::std::option::Option<extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    buf:
                                                                        jobject)
                                                          ->
                                                              *mut ::libc::c_void>,
    pub GetDirectBufferCapacity: ::std::option::Option<extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     buf:
                                                                         jobject)
                                                           -> jlong>,
    pub GetObjectRefType: ::std::option::Option<extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              obj: jobject)
                                                    -> jobjectRefType>,
}
impl ::std::clone::Clone for Struct_JNINativeInterface_ {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JNINativeInterface_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JNIEnv_ {
    pub functions: *const Struct_JNINativeInterface_,
}
impl ::std::clone::Clone for Struct_JNIEnv_ {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JNIEnv_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JavaVMOption {
    pub optionString: *mut ::libc::c_char,
    pub extraInfo: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_JavaVMOption {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JavaVMOption {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JavaVMOption = Struct_JavaVMOption;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
impl ::std::clone::Clone for Struct_JavaVMInitArgs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JavaVMInitArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JavaVMInitArgs = Struct_JavaVMInitArgs;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JavaVMAttachArgs {
    pub version: jint,
    pub name: *mut ::libc::c_char,
    pub group: jobject,
}
impl ::std::clone::Clone for Struct_JavaVMAttachArgs {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JavaVMAttachArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JavaVMAttachArgs = Struct_JavaVMAttachArgs;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JNIInvokeInterface_ {
    pub reserved0: *mut ::libc::c_void,
    pub reserved1: *mut ::libc::c_void,
    pub reserved2: *mut ::libc::c_void,
    pub DestroyJavaVM: ::std::option::Option<extern "C" fn(vm: *mut JavaVM)
                                                 -> jint>,
    pub AttachCurrentThread: ::std::option::Option<extern "C" fn(vm:
                                                                     *mut JavaVM,
                                                                 penv:
                                                                     *mut *mut ::libc::c_void,
                                                                 args:
                                                                     *mut ::libc::c_void)
                                                       -> jint>,
    pub DetachCurrentThread: ::std::option::Option<extern "C" fn(vm:
                                                                     *mut JavaVM)
                                                       -> jint>,
    pub GetEnv: ::std::option::Option<extern "C" fn(vm: *mut JavaVM,
                                                    penv:
                                                        *mut *mut ::libc::c_void,
                                                    version: jint) -> jint>,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<extern "C" fn(vm:
                                                                             *mut JavaVM,
                                                                         penv:
                                                                             *mut *mut ::libc::c_void,
                                                                         args:
                                                                             *mut ::libc::c_void)
                                                               -> jint>,
}
impl ::std::clone::Clone for Struct_JNIInvokeInterface_ {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JNIInvokeInterface_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_JavaVM_ {
    pub functions: *const Struct_JNIInvokeInterface_,
}
impl ::std::clone::Clone for Struct_JavaVM_ {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_JavaVM_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: Struct__IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: Struct__IO_FILE_plus;
    pub static mut stdin: *mut Struct__IO_FILE;
    pub static mut stdout: *mut Struct__IO_FILE;
    pub static mut stderr: *mut Struct__IO_FILE;
    pub static mut sys_nerr: ::libc::c_int;
    pub static mut sys_errlist: *const *const ::libc::c_char;
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_putc(__c: ::libc::c_int, __fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE) -> ();
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::libc::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE, arg2: *const ::libc::c_char,
                        arg3: __gnuc_va_list) -> ::libc::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::libc::c_int, arg3: __ssize_t)
     -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::libc::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int, arg4: ::libc::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::libc::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE) -> ();
    pub fn remove(__filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn rename(__old: *const ::libc::c_char, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn renameat(__oldfd: ::libc::c_int, __old: *const ::libc::c_char,
                    __newfd: ::libc::c_int, __new: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tmpnam_r(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn tempnam(__dir: *const ::libc::c_char, __pfx: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fopen(__filename: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::libc::c_char,
                   __modes: *const ::libc::c_char, __stream: *mut FILE)
     -> *mut FILE;
    pub fn fdopen(__fd: ::libc::c_int, __modes: *const ::libc::c_char)
     -> *mut FILE;
    pub fn fmemopen(__s: *mut ::libc::c_void, __len: size_t,
                    __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::libc::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char) -> ();
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                   __modes: ::libc::c_int, __n: size_t) -> ::libc::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::libc::c_char,
                     __size: size_t) -> ();
    pub fn setlinebuf(__stream: *mut FILE) -> ();
    pub fn fprintf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn printf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sprintf(__s: *mut ::libc::c_char,
                   __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vprintf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsprintf(__s: *mut ::libc::c_char, __format: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn snprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                    __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vsnprintf(__s: *mut ::libc::c_char, __maxlen: size_t,
                     __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vdprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char,
                    __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn dprintf(__fd: ::libc::c_int, __fmt: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn fscanf(__stream: *mut FILE, __format: *const ::libc::c_char, ...)
     -> ::libc::c_int;
    pub fn scanf(__format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn sscanf(__s: *const ::libc::c_char,
                  __format: *const ::libc::c_char, ...) -> ::libc::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::libc::c_char,
                   __arg: __gnuc_va_list) -> ::libc::c_int;
    pub fn vscanf(__format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn vsscanf(__s: *const ::libc::c_char,
                   __format: *const ::libc::c_char, __arg: __gnuc_va_list)
     -> ::libc::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getc(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar() -> ::libc::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn getchar_unlocked() -> ::libc::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fputc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn putchar(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn fputc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putc_unlocked(__c: ::libc::c_int, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn putchar_unlocked(__c: ::libc::c_int) -> ::libc::c_int;
    pub fn getw(__stream: *mut FILE) -> ::libc::c_int;
    pub fn putw(__w: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fgets(__s: *mut ::libc::c_char, __n: ::libc::c_int,
                 __stream: *mut FILE) -> *mut ::libc::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                      __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                    __delimiter: ::libc::c_int, __stream: *mut FILE)
     -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::libc::c_char, __n: *mut size_t,
                   __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::libc::c_char, __stream: *mut FILE)
     -> ::libc::c_int;
    pub fn puts(__s: *const ::libc::c_char) -> ::libc::c_int;
    pub fn ungetc(__c: ::libc::c_int, __stream: *mut FILE) -> ::libc::c_int;
    pub fn fread(__ptr: *mut ::libc::c_void, __size: size_t, __n: size_t,
                 __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::libc::c_void, __size: size_t, __n: size_t,
                  __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::libc::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::libc::c_void, __size: size_t,
                           __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::libc::c_long,
                 __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::libc::c_long;
    pub fn rewind(__stream: *mut FILE) -> ();
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::libc::c_int) -> ::libc::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::libc::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::libc::c_int;
    pub fn clearerr(__stream: *mut FILE) -> ();
    pub fn feof(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::libc::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE) -> ();
    pub fn feof_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn perror(__s: *const ::libc::c_char) -> ();
    pub fn fileno(__stream: *mut FILE) -> ::libc::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::libc::c_int;
    pub fn popen(__command: *const ::libc::c_char,
                 __modes: *const ::libc::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::libc::c_int;
    pub fn ctermid(__s: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn flockfile(__stream: *mut FILE) -> ();
    pub fn ftrylockfile(__stream: *mut FILE) -> ::libc::c_int;
    pub fn funlockfile(__stream: *mut FILE) -> ();
    pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut ::libc::c_void) -> jint;
    pub fn JNI_CreateJavaVM(pvm: *mut *mut JavaVM,
                            penv: *mut *mut ::libc::c_void,
                            args: *mut ::libc::c_void) -> jint;
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize,
                                 arg3: *mut jsize) -> jint;
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::libc::c_void) -> jint;
    pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut ::libc::c_void) -> ();
}
