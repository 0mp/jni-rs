/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const __llvm__: ::std::os::raw::c_uchar = 1;
pub const __clang__: ::std::os::raw::c_uchar = 1;
pub const __clang_major__: ::std::os::raw::c_uchar = 3;
pub const __clang_minor__: ::std::os::raw::c_uchar = 8;
pub const __clang_patchlevel__: ::std::os::raw::c_uchar = 1;
pub const __GNUC_MINOR__: ::std::os::raw::c_uchar = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uchar = 1;
pub const __GNUC__: ::std::os::raw::c_uchar = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_ushort = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uchar = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uchar = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uchar = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uchar = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uchar = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uchar = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uchar = 1;
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uchar = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uchar = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_ushort = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_ushort = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_ushort = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_ushort = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uchar = 1;
pub const _LP64: ::std::os::raw::c_uchar = 1;
pub const __LP64__: ::std::os::raw::c_uchar = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uchar = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uchar = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_char = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_char = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_char = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uchar = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uchar = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uchar = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uchar = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uchar = 16;
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __SIZE_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uchar = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uchar = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uchar = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uchar = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uchar = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uchar = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_char = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_char = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uchar = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uchar = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_ushort = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_short = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_short = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uchar = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uchar = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uchar = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_ushort = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_ushort = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_short = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_short = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uchar = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uchar = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uchar = 1;
pub const __UINT8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uchar = 127;
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uchar = 255;
pub const __INT_FAST16_MAX__: ::std::os::raw::c_ushort = 32767;
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_ushort = 65535;
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_char = -1;
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uchar = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uchar = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uchar = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uchar = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uchar = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uchar = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uchar = 21;
pub const __amd64__: ::std::os::raw::c_uchar = 1;
pub const __amd64: ::std::os::raw::c_uchar = 1;
pub const __x86_64: ::std::os::raw::c_uchar = 1;
pub const __x86_64__: ::std::os::raw::c_uchar = 1;
pub const __k8: ::std::os::raw::c_uchar = 1;
pub const __k8__: ::std::os::raw::c_uchar = 1;
pub const __tune_k8__: ::std::os::raw::c_uchar = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uchar = 1;
pub const __FXSR__: ::std::os::raw::c_uchar = 1;
pub const __SSE2__: ::std::os::raw::c_uchar = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uchar = 1;
pub const __SSE__: ::std::os::raw::c_uchar = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uchar = 1;
pub const __MMX__: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uchar = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uchar = 1;
pub const unix: ::std::os::raw::c_uchar = 1;
pub const __unix: ::std::os::raw::c_uchar = 1;
pub const __unix__: ::std::os::raw::c_uchar = 1;
pub const linux: ::std::os::raw::c_uchar = 1;
pub const __linux: ::std::os::raw::c_uchar = 1;
pub const __linux__: ::std::os::raw::c_uchar = 1;
pub const __gnu_linux__: ::std::os::raw::c_uchar = 1;
pub const __ELF__: ::std::os::raw::c_uchar = 1;
pub const __STDC__: ::std::os::raw::c_uchar = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uchar = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uchar = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uchar = 1;
pub const _STDIO_H: ::std::os::raw::c_uchar = 1;
pub const _FEATURES_H: ::std::os::raw::c_uchar = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uchar = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uchar = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uchar = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uchar = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uchar = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uchar = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uchar = 1;
pub const __USE_MISC: ::std::os::raw::c_uchar = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uchar = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uchar = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uchar = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uchar = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201505;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uchar = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uchar = 6;
pub const __GLIBC__: ::std::os::raw::c_uchar = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uchar = 24;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uchar = 1;
pub const __WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uchar = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uchar = 64;
pub const _BITS_TYPES_H: ::std::os::raw::c_uchar = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uchar = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uchar = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uchar = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_ushort = 1024;
pub const __FILE_defined: ::std::os::raw::c_uchar = 1;
pub const ____FILE_defined: ::std::os::raw::c_uchar = 1;
pub const _G_config_h: ::std::os::raw::c_uchar = 1;
pub const ____mbstate_t_defined: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MMAP: ::std::os::raw::c_uchar = 1;
pub const _G_HAVE_MREMAP: ::std::os::raw::c_uchar = 1;
pub const _G_IO_IO_FILE_VERSION: ::std::os::raw::c_uint = 131073;
pub const _G_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const _IO_BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const __GNUC_VA_LIST: ::std::os::raw::c_uchar = 1;
pub const _IO_UNIFIED_JUMPTABLES: ::std::os::raw::c_uchar = 1;
pub const EOF: ::std::os::raw::c_char = -1;
pub const _IOS_INPUT: ::std::os::raw::c_uchar = 1;
pub const _IOS_OUTPUT: ::std::os::raw::c_uchar = 2;
pub const _IOS_ATEND: ::std::os::raw::c_uchar = 4;
pub const _IOS_APPEND: ::std::os::raw::c_uchar = 8;
pub const _IOS_TRUNC: ::std::os::raw::c_uchar = 16;
pub const _IOS_NOCREATE: ::std::os::raw::c_uchar = 32;
pub const _IOS_NOREPLACE: ::std::os::raw::c_uchar = 64;
pub const _IOS_BIN: ::std::os::raw::c_uchar = 128;
pub const _IO_MAGIC: ::std::os::raw::c_uint = 4222418944;
pub const _OLD_STDIO_MAGIC: ::std::os::raw::c_uint = 4206624768;
pub const _IO_MAGIC_MASK: ::std::os::raw::c_uint = 4294901760;
pub const _IO_USER_BUF: ::std::os::raw::c_uchar = 1;
pub const _IO_UNBUFFERED: ::std::os::raw::c_uchar = 2;
pub const _IO_NO_READS: ::std::os::raw::c_uchar = 4;
pub const _IO_NO_WRITES: ::std::os::raw::c_uchar = 8;
pub const _IO_EOF_SEEN: ::std::os::raw::c_uchar = 16;
pub const _IO_ERR_SEEN: ::std::os::raw::c_uchar = 32;
pub const _IO_DELETE_DONT_CLOSE: ::std::os::raw::c_uchar = 64;
pub const _IO_LINKED: ::std::os::raw::c_uchar = 128;
pub const _IO_IN_BACKUP: ::std::os::raw::c_ushort = 256;
pub const _IO_LINE_BUF: ::std::os::raw::c_ushort = 512;
pub const _IO_TIED_PUT_GET: ::std::os::raw::c_ushort = 1024;
pub const _IO_CURRENTLY_PUTTING: ::std::os::raw::c_ushort = 2048;
pub const _IO_IS_APPENDING: ::std::os::raw::c_ushort = 4096;
pub const _IO_IS_FILEBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_BAD_SEEN: ::std::os::raw::c_ushort = 16384;
pub const _IO_USER_LOCK: ::std::os::raw::c_ushort = 32768;
pub const _IO_FLAGS2_MMAP: ::std::os::raw::c_uchar = 1;
pub const _IO_FLAGS2_NOTCANCEL: ::std::os::raw::c_uchar = 2;
pub const _IO_FLAGS2_USER_WBUF: ::std::os::raw::c_uchar = 8;
pub const _IO_SKIPWS: ::std::os::raw::c_uchar = 1;
pub const _IO_LEFT: ::std::os::raw::c_uchar = 2;
pub const _IO_RIGHT: ::std::os::raw::c_uchar = 4;
pub const _IO_INTERNAL: ::std::os::raw::c_uchar = 8;
pub const _IO_DEC: ::std::os::raw::c_uchar = 16;
pub const _IO_OCT: ::std::os::raw::c_uchar = 32;
pub const _IO_HEX: ::std::os::raw::c_uchar = 64;
pub const _IO_SHOWBASE: ::std::os::raw::c_uchar = 128;
pub const _IO_SHOWPOINT: ::std::os::raw::c_ushort = 256;
pub const _IO_UPPERCASE: ::std::os::raw::c_ushort = 512;
pub const _IO_SHOWPOS: ::std::os::raw::c_ushort = 1024;
pub const _IO_SCIENTIFIC: ::std::os::raw::c_ushort = 2048;
pub const _IO_FIXED: ::std::os::raw::c_ushort = 4096;
pub const _IO_UNITBUF: ::std::os::raw::c_ushort = 8192;
pub const _IO_STDIO: ::std::os::raw::c_ushort = 16384;
pub const _IO_DONT_CLOSE: ::std::os::raw::c_ushort = 32768;
pub const _IO_BOOLALPHA: ::std::os::raw::c_uint = 65536;
pub const _IOFBF: ::std::os::raw::c_uchar = 0;
pub const _IOLBF: ::std::os::raw::c_uchar = 1;
pub const _IONBF: ::std::os::raw::c_uchar = 2;
pub const BUFSIZ: ::std::os::raw::c_ushort = 8192;
pub const SEEK_SET: ::std::os::raw::c_uchar = 0;
pub const SEEK_CUR: ::std::os::raw::c_uchar = 1;
pub const SEEK_END: ::std::os::raw::c_uchar = 2;
pub const L_tmpnam: ::std::os::raw::c_uchar = 20;
pub const TMP_MAX: ::std::os::raw::c_uint = 238328;
pub const FILENAME_MAX: ::std::os::raw::c_ushort = 4096;
pub const L_ctermid: ::std::os::raw::c_uchar = 9;
pub const FOPEN_MAX: ::std::os::raw::c_uchar = 16;
pub const JNI_FALSE: ::std::os::raw::c_uchar = 0;
pub const JNI_TRUE: ::std::os::raw::c_uchar = 1;
pub const JNI_OK: ::std::os::raw::c_uchar = 0;
pub const JNI_ERR: ::std::os::raw::c_char = -1;
pub const JNI_EDETACHED: ::std::os::raw::c_char = -2;
pub const JNI_EVERSION: ::std::os::raw::c_char = -3;
pub const JNI_ENOMEM: ::std::os::raw::c_char = -4;
pub const JNI_EEXIST: ::std::os::raw::c_char = -5;
pub const JNI_EINVAL: ::std::os::raw::c_char = -6;
pub const JNI_COMMIT: ::std::os::raw::c_uchar = 1;
pub const JNI_ABORT: ::std::os::raw::c_uchar = 2;
pub const JNI_VERSION_1_1: ::std::os::raw::c_uint = 65537;
pub const JNI_VERSION_1_2: ::std::os::raw::c_uint = 65538;
pub const JNI_VERSION_1_4: ::std::os::raw::c_uint = 65540;
pub const JNI_VERSION_1_6: ::std::os::raw::c_uint = 65542;
pub const JNI_VERSION_1_8: ::std::os::raw::c_uint = 65544;
pub type jint = ::std::os::raw::c_int;
pub type jlong = ::std::os::raw::c_long;
pub type jbyte = ::std::os::raw::c_char;
pub type size_t = usize;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: Union_Unnamed1,
}
impl ::std::default::Default for __mbstate_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __wch(&mut self) -> *mut ::std::os::raw::c_uint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wchb(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
impl ::std::default::Default for _G_fpos64_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type va_list = __gnuc_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _IO_jump_t { }
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
    _bindgen_padding_0_: [u8; 4usize],
}
impl ::std::default::Default for _IO_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_char,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
impl ::std::default::Default for _IO_FILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _IO_FILE_plus { }
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: size_t)
                              -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: size_t) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type off_t = __off_t;
pub type ssize_t = isize;
pub type fpos_t = _G_fpos_t;
pub type jboolean = ::std::os::raw::c_uchar;
pub type jchar = ::std::os::raw::c_ushort;
pub type jshort = ::std::os::raw::c_short;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
pub enum _jobject { }
pub type jobject = *mut _jobject;
pub type jclass = jobject;
pub type jthrowable = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jobjectArray = jarray;
pub type jweak = jobject;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct jvalue {
    pub _bindgen_data_: [u64; 1usize],
}
impl jvalue {
    pub unsafe fn z(&mut self) -> *mut jboolean {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn b(&mut self) -> *mut jbyte {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn c(&mut self) -> *mut jchar {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s(&mut self) -> *mut jshort {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn i(&mut self) -> *mut jint {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn j(&mut self) -> *mut jlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn f(&mut self) -> *mut jfloat {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn d(&mut self) -> *mut jdouble {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn l(&mut self) -> *mut jobject {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for jvalue {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum _jfieldID { }
pub type jfieldID = *mut _jfieldID;
pub enum _jmethodID { }
pub type jmethodID = *mut _jmethodID;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum _jobjectType {
    JNIInvalidRefType = 0,
    JNILocalRefType = 1,
    JNIGlobalRefType = 2,
    JNIWeakGlobalRefType = 3,
}
pub type jobjectRefType = _jobjectType;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNINativeMethod {
    pub name: *mut ::std::os::raw::c_char,
    pub signature: *mut ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for JNINativeMethod {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type JNIEnv = *const JNINativeInterface_;
pub type JavaVM = *const JNIInvokeInterface_;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNINativeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                   *mut JNIEnv)
                                              -> jint>,
    pub DefineClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                name:
                                                                    *const ::std::os::raw::c_char,
                                                                loader:
                                                                    jobject,
                                                                buf:
                                                                    *const jbyte,
                                                                len: jsize)
                                               -> jclass>,
    pub FindClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              name:
                                                                  *const ::std::os::raw::c_char)
                                             -> jclass>,
    pub FromReflectedMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        method:
                                                                            jobject)
                                                       -> jmethodID>,
    pub FromReflectedField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       field:
                                                                           jobject)
                                                      -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      cls:
                                                                          jclass,
                                                                      methodID:
                                                                          jmethodID,
                                                                      isStatic:
                                                                          jboolean)
                                                     -> jobject>,
    pub GetSuperclass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  sub: jclass)
                                                 -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     sub:
                                                                         jclass,
                                                                     sup:
                                                                         jclass)
                                                    -> jboolean>,
    pub ToReflectedField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     cls:
                                                                         jclass,
                                                                     fieldID:
                                                                         jfieldID,
                                                                     isStatic:
                                                                         jboolean)
                                                    -> jobject>,
    pub Throw: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv,
                                                          obj: jthrowable)
                                         -> jint>,
    pub ThrowNew: ::std::option::Option<unsafe extern "C" fn(env: *mut JNIEnv,
                                                             clazz: jclass,
                                                             msg:
                                                                 *const ::std::os::raw::c_char)
                                            -> jint>,
    pub ExceptionOccurred: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv)
                                                     -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<unsafe extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               msg:
                                                                   *const ::std::os::raw::c_char)>,
    pub PushLocalFrame: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   capacity:
                                                                       jint)
                                                  -> jint>,
    pub PopLocalFrame: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  result:
                                                                      jobject)
                                                 -> jobject>,
    pub NewGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 lobj:
                                                                     jobject)
                                                -> jobject>,
    pub DeleteGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    gref:
                                                                        jobject)>,
    pub DeleteLocalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject)>,
    pub IsSameObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj1:
                                                                     jobject,
                                                                 obj2:
                                                                     jobject)
                                                -> jboolean>,
    pub NewLocalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                ref_: jobject)
                                               -> jobject>,
    pub EnsureLocalCapacity: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        capacity:
                                                                            jint)
                                                       -> jint>,
    pub AllocObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass)
                                               -> jobject>,
    pub NewObject: ::std::option::Option<unsafe extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              clazz: jclass,
                                                              methodID:
                                                                  jmethodID, ...)
                                             -> jobject>,
    pub NewObjectV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               methodID:
                                                                   jmethodID,
                                                               args: va_list)
                                              -> jobject>,
    pub NewObjectA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               methodID:
                                                                   jmethodID,
                                                               args:
                                                                   *const jvalue)
                                              -> jobject>,
    pub GetObjectClass: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject)
                                                  -> jclass>,
    pub IsInstanceOf: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 clazz:
                                                                     jclass)
                                                -> jboolean>,
    pub GetMethodID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                clazz: jclass,
                                                                name:
                                                                    *const ::std::os::raw::c_char,
                                                                sig:
                                                                    *const ::std::os::raw::c_char)
                                               -> jmethodID>,
    pub CallObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID, ...)
                                                    -> jobject>,
    pub CallObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          va_list)
                                                     -> jobject>,
    pub CallObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          *const jvalue)
                                                     -> jobject>,
    pub CallBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID, ...)
                                                     -> jboolean>,
    pub CallBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           va_list)
                                                      -> jboolean>,
    pub CallBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       obj:
                                                                           jobject,
                                                                       methodID:
                                                                           jmethodID,
                                                                       args:
                                                                           *const jvalue)
                                                      -> jboolean>,
    pub CallByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID, ...)
                                                  -> jbyte>,
    pub CallByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)
                                                   -> jbyte>,
    pub CallByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)
                                                   -> jbyte>,
    pub CallCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID, ...)
                                                  -> jchar>,
    pub CallCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)
                                                   -> jchar>,
    pub CallCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)
                                                   -> jchar>,
    pub CallShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID, ...)
                                                   -> jshort>,
    pub CallShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         va_list)
                                                    -> jshort>,
    pub CallShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         *const jvalue)
                                                    -> jshort>,
    pub CallIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  obj:
                                                                      jobject,
                                                                  methodID:
                                                                      jmethodID, ...)
                                                 -> jint>,
    pub CallIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       va_list)
                                                  -> jint>,
    pub CallIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID,
                                                                   args:
                                                                       *const jvalue)
                                                  -> jint>,
    pub CallLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID, ...)
                                                  -> jlong>,
    pub CallLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)
                                                   -> jlong>,
    pub CallLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)
                                                   -> jlong>,
    pub CallFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID, ...)
                                                   -> jfloat>,
    pub CallFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         va_list)
                                                    -> jfloat>,
    pub CallFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID,
                                                                     args:
                                                                         *const jvalue)
                                                    -> jfloat>,
    pub CallDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject,
                                                                     methodID:
                                                                         jmethodID, ...)
                                                    -> jdouble>,
    pub CallDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          va_list)
                                                     -> jdouble>,
    pub CallDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      obj:
                                                                          jobject,
                                                                      methodID:
                                                                          jmethodID,
                                                                      args:
                                                                          *const jvalue)
                                                     -> jdouble>,
    pub CallVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   methodID:
                                                                       jmethodID, ...)>,
    pub CallVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        va_list)>,
    pub CallVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    methodID:
                                                                        jmethodID,
                                                                    args:
                                                                        *const jvalue)>,
    pub CallNonvirtualObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID, ...)
                                                              -> jobject>,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    va_list)
                                                               -> jobject>,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    *const jvalue)
                                                               -> jobject>,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID, ...)
                                                               -> jboolean>,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     va_list)
                                                                -> jboolean>,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                     *mut JNIEnv,
                                                                                 obj:
                                                                                     jobject,
                                                                                 clazz:
                                                                                     jclass,
                                                                                 methodID:
                                                                                     jmethodID,
                                                                                 args:
                                                                                     *const jvalue)
                                                                -> jboolean>,
    pub CallNonvirtualByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jbyte>,
    pub CallNonvirtualByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jbyte>,
    pub CallNonvirtualByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jbyte>,
    pub CallNonvirtualCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jchar>,
    pub CallNonvirtualCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jchar>,
    pub CallNonvirtualCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jchar>,
    pub CallNonvirtualShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID, ...)
                                                             -> jshort>,
    pub CallNonvirtualShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   va_list)
                                                              -> jshort>,
    pub CallNonvirtualShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   *const jvalue)
                                                              -> jshort>,
    pub CallNonvirtualIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            obj:
                                                                                jobject,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID, ...)
                                                           -> jint>,
    pub CallNonvirtualIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 va_list)
                                                            -> jint>,
    pub CallNonvirtualIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 *const jvalue)
                                                            -> jint>,
    pub CallNonvirtualLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)
                                                            -> jlong>,
    pub CallNonvirtualLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)
                                                             -> jlong>,
    pub CallNonvirtualLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)
                                                             -> jlong>,
    pub CallNonvirtualFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID, ...)
                                                             -> jfloat>,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   va_list)
                                                              -> jfloat>,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID,
                                                                               args:
                                                                                   *const jvalue)
                                                              -> jfloat>,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               obj:
                                                                                   jobject,
                                                                               clazz:
                                                                                   jclass,
                                                                               methodID:
                                                                                   jmethodID, ...)
                                                              -> jdouble>,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    va_list)
                                                               -> jdouble>,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                obj:
                                                                                    jobject,
                                                                                clazz:
                                                                                    jclass,
                                                                                methodID:
                                                                                    jmethodID,
                                                                                args:
                                                                                    *const jvalue)
                                                               -> jdouble>,
    pub CallNonvirtualVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             obj:
                                                                                 jobject,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID, ...)>,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  va_list)>,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              obj:
                                                                                  jobject,
                                                                              clazz:
                                                                                  jclass,
                                                                              methodID:
                                                                                  jmethodID,
                                                                              args:
                                                                                  *const jvalue)>,
    pub GetFieldID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                   *mut JNIEnv,
                                                               clazz: jclass,
                                                               name:
                                                                   *const ::std::os::raw::c_char,
                                                               sig:
                                                                   *const ::std::os::raw::c_char)
                                              -> jfieldID>,
    pub GetObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   fieldID:
                                                                       jfieldID)
                                                  -> jobject>,
    pub GetBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    fieldID:
                                                                        jfieldID)
                                                   -> jboolean>,
    pub GetByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID)
                                                -> jbyte>,
    pub GetCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID)
                                                -> jchar>,
    pub GetShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  obj:
                                                                      jobject,
                                                                  fieldID:
                                                                      jfieldID)
                                                 -> jshort>,
    pub GetIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                obj: jobject,
                                                                fieldID:
                                                                    jfieldID)
                                               -> jint>,
    pub GetLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID)
                                                -> jlong>,
    pub GetFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  obj:
                                                                      jobject,
                                                                  fieldID:
                                                                      jfieldID)
                                                 -> jfloat>,
    pub GetDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   fieldID:
                                                                       jfieldID)
                                                  -> jdouble>,
    pub SetObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   fieldID:
                                                                       jfieldID,
                                                                   val:
                                                                       jobject)>,
    pub SetBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    obj:
                                                                        jobject,
                                                                    fieldID:
                                                                        jfieldID,
                                                                    val:
                                                                        jboolean)>,
    pub SetByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID,
                                                                 val: jbyte)>,
    pub SetCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID,
                                                                 val: jchar)>,
    pub SetShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  obj:
                                                                      jobject,
                                                                  fieldID:
                                                                      jfieldID,
                                                                  val:
                                                                      jshort)>,
    pub SetIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                obj: jobject,
                                                                fieldID:
                                                                    jfieldID,
                                                                val: jint)>,
    pub SetLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject,
                                                                 fieldID:
                                                                     jfieldID,
                                                                 val: jlong)>,
    pub SetFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  obj:
                                                                      jobject,
                                                                  fieldID:
                                                                      jfieldID,
                                                                  val:
                                                                      jfloat)>,
    pub SetDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   obj:
                                                                       jobject,
                                                                   fieldID:
                                                                       jfieldID,
                                                                   val:
                                                                       jdouble)>,
    pub GetStaticMethodID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass,
                                                                      name:
                                                                          *const ::std::os::raw::c_char,
                                                                      sig:
                                                                          *const ::std::os::raw::c_char)
                                                     -> jmethodID>,
    pub CallStaticObjectMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID, ...)
                                                          -> jobject>,
    pub CallStaticObjectMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID,
                                                                            args:
                                                                                va_list)
                                                           -> jobject>,
    pub CallStaticObjectMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID,
                                                                            args:
                                                                                *const jvalue)
                                                           -> jobject>,
    pub CallStaticBooleanMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID, ...)
                                                           -> jboolean>,
    pub CallStaticBooleanMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 va_list)
                                                            -> jboolean>,
    pub CallStaticBooleanMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             clazz:
                                                                                 jclass,
                                                                             methodID:
                                                                                 jmethodID,
                                                                             args:
                                                                                 *const jvalue)
                                                            -> jboolean>,
    pub CallStaticByteMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                        -> jbyte>,
    pub CallStaticByteMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                         -> jbyte>,
    pub CallStaticByteMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                         -> jbyte>,
    pub CallStaticCharMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                        -> jchar>,
    pub CallStaticCharMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                         -> jchar>,
    pub CallStaticCharMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                         -> jchar>,
    pub CallStaticShortMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID, ...)
                                                         -> jshort>,
    pub CallStaticShortMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               va_list)
                                                          -> jshort>,
    pub CallStaticShortMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               *const jvalue)
                                                          -> jshort>,
    pub CallStaticIntMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        methodID:
                                                                            jmethodID, ...)
                                                       -> jint>,
    pub CallStaticIntMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             va_list)
                                                        -> jint>,
    pub CallStaticIntMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID,
                                                                         args:
                                                                             *const jvalue)
                                                        -> jint>,
    pub CallStaticLongMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID, ...)
                                                        -> jlong>,
    pub CallStaticLongMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)
                                                         -> jlong>,
    pub CallStaticLongMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)
                                                         -> jlong>,
    pub CallStaticFloatMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID, ...)
                                                         -> jfloat>,
    pub CallStaticFloatMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               va_list)
                                                          -> jfloat>,
    pub CallStaticFloatMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID,
                                                                           args:
                                                                               *const jvalue)
                                                          -> jfloat>,
    pub CallStaticDoubleMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           clazz:
                                                                               jclass,
                                                                           methodID:
                                                                               jmethodID, ...)
                                                          -> jdouble>,
    pub CallStaticDoubleMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID,
                                                                            args:
                                                                                va_list)
                                                           -> jdouble>,
    pub CallStaticDoubleMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            clazz:
                                                                                jclass,
                                                                            methodID:
                                                                                jmethodID,
                                                                            args:
                                                                                *const jvalue)
                                                           -> jdouble>,
    pub CallStaticVoidMethod: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         cls:
                                                                             jclass,
                                                                         methodID:
                                                                             jmethodID, ...)>,
    pub CallStaticVoidMethodV: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          cls:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              va_list)>,
    pub CallStaticVoidMethodA: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          cls:
                                                                              jclass,
                                                                          methodID:
                                                                              jmethodID,
                                                                          args:
                                                                              *const jvalue)>,
    pub GetStaticFieldID: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     clazz:
                                                                         jclass,
                                                                     name:
                                                                         *const ::std::os::raw::c_char,
                                                                     sig:
                                                                         *const ::std::os::raw::c_char)
                                                    -> jfieldID>,
    pub GetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         fieldID:
                                                                             jfieldID)
                                                        -> jobject>,
    pub GetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          fieldID:
                                                                              jfieldID)
                                                         -> jboolean>,
    pub GetStaticByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID)
                                                      -> jbyte>,
    pub GetStaticCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID)
                                                      -> jchar>,
    pub GetStaticShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        fieldID:
                                                                            jfieldID)
                                                       -> jshort>,
    pub GetStaticIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass,
                                                                      fieldID:
                                                                          jfieldID)
                                                     -> jint>,
    pub GetStaticLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID)
                                                      -> jlong>,
    pub GetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        fieldID:
                                                                            jfieldID)
                                                       -> jfloat>,
    pub GetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         fieldID:
                                                                             jfieldID)
                                                        -> jdouble>,
    pub SetStaticObjectField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         fieldID:
                                                                             jfieldID,
                                                                         value:
                                                                             jobject)>,
    pub SetStaticBooleanField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          clazz:
                                                                              jclass,
                                                                          fieldID:
                                                                              jfieldID,
                                                                          value:
                                                                              jboolean)>,
    pub SetStaticByteField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID,
                                                                       value:
                                                                           jbyte)>,
    pub SetStaticCharField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID,
                                                                       value:
                                                                           jchar)>,
    pub SetStaticShortField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        fieldID:
                                                                            jfieldID,
                                                                        value:
                                                                            jshort)>,
    pub SetStaticIntField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass,
                                                                      fieldID:
                                                                          jfieldID,
                                                                      value:
                                                                          jint)>,
    pub SetStaticLongField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       clazz:
                                                                           jclass,
                                                                       fieldID:
                                                                           jfieldID,
                                                                       value:
                                                                           jlong)>,
    pub SetStaticFloatField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        clazz:
                                                                            jclass,
                                                                        fieldID:
                                                                            jfieldID,
                                                                        value:
                                                                            jfloat)>,
    pub SetStaticDoubleField: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         clazz:
                                                                             jclass,
                                                                         fieldID:
                                                                             jfieldID,
                                                                         value:
                                                                             jdouble)>,
    pub NewString: ::std::option::Option<unsafe extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              unicode:
                                                                  *const jchar,
                                                              len: jsize)
                                             -> jstring>,
    pub GetStringLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    str:
                                                                        jstring)
                                                   -> jsize>,
    pub GetStringChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   str:
                                                                       jstring,
                                                                   isCopy:
                                                                       *mut jboolean)
                                                  -> *const jchar>,
    pub ReleaseStringChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       str:
                                                                           jstring,
                                                                       chars:
                                                                           *const jchar)>,
    pub NewStringUTF: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 utf:
                                                                     *const ::std::os::raw::c_char)
                                                -> jstring>,
    pub GetStringUTFLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       str:
                                                                           jstring)
                                                      -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      str:
                                                                          jstring,
                                                                      isCopy:
                                                                          *mut jboolean)
                                                     ->
                                                         *const ::std::os::raw::c_char>,
    pub ReleaseStringUTFChars: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          str:
                                                                              jstring,
                                                                          chars:
                                                                              *const ::std::os::raw::c_char)>,
    pub GetArrayLength: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   array:
                                                                       jarray)
                                                  -> jsize>,
    pub NewObjectArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   len: jsize,
                                                                   clazz:
                                                                       jclass,
                                                                   init:
                                                                       jobject)
                                                  -> jobjectArray>,
    pub GetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jobjectArray,
                                                                          index:
                                                                              jsize)
                                                         -> jobject>,
    pub SetObjectArrayElement: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jobjectArray,
                                                                          index:
                                                                              jsize,
                                                                          val:
                                                                              jobject)>,
    pub NewBooleanArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    len:
                                                                        jsize)
                                                   -> jbooleanArray>,
    pub NewByteArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 len: jsize)
                                                -> jbyteArray>,
    pub NewCharArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 len: jsize)
                                                -> jcharArray>,
    pub NewShortArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  len: jsize)
                                                 -> jshortArray>,
    pub NewIntArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                len: jsize)
                                               -> jintArray>,
    pub NewLongArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 len: jsize)
                                                -> jlongArray>,
    pub NewFloatArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                      *mut JNIEnv,
                                                                  len: jsize)
                                                 -> jfloatArray>,
    pub NewDoubleArray: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv,
                                                                   len: jsize)
                                                  -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jbooleanArray,
                                                                            isCopy:
                                                                                *mut jboolean)
                                                           -> *mut jboolean>,
    pub GetByteArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jbyteArray,
                                                                         isCopy:
                                                                             *mut jboolean)
                                                        -> *mut jbyte>,
    pub GetCharArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jcharArray,
                                                                         isCopy:
                                                                             *mut jboolean)
                                                        -> *mut jchar>,
    pub GetShortArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jshortArray,
                                                                          isCopy:
                                                                              *mut jboolean)
                                                         -> *mut jshort>,
    pub GetIntArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jintArray,
                                                                        isCopy:
                                                                            *mut jboolean)
                                                       -> *mut jint>,
    pub GetLongArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jlongArray,
                                                                         isCopy:
                                                                             *mut jboolean)
                                                        -> *mut jlong>,
    pub GetFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jfloatArray,
                                                                          isCopy:
                                                                              *mut jboolean)
                                                         -> *mut jfloat>,
    pub GetDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           array:
                                                                               jdoubleArray,
                                                                           isCopy:
                                                                               *mut jboolean)
                                                          -> *mut jdouble>,
    pub ReleaseBooleanArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                    *mut JNIEnv,
                                                                                array:
                                                                                    jbooleanArray,
                                                                                elems:
                                                                                    *mut jboolean,
                                                                                mode:
                                                                                    jint)>,
    pub ReleaseByteArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jbyteArray,
                                                                             elems:
                                                                                 *mut jbyte,
                                                                             mode:
                                                                                 jint)>,
    pub ReleaseCharArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jcharArray,
                                                                             elems:
                                                                                 *mut jchar,
                                                                             mode:
                                                                                 jint)>,
    pub ReleaseShortArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jshortArray,
                                                                              elems:
                                                                                  *mut jshort,
                                                                              mode:
                                                                                  jint)>,
    pub ReleaseIntArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            array:
                                                                                jintArray,
                                                                            elems:
                                                                                *mut jint,
                                                                            mode:
                                                                                jint)>,
    pub ReleaseLongArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                 *mut JNIEnv,
                                                                             array:
                                                                                 jlongArray,
                                                                             elems:
                                                                                 *mut jlong,
                                                                             mode:
                                                                                 jint)>,
    pub ReleaseFloatArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jfloatArray,
                                                                              elems:
                                                                                  *mut jfloat,
                                                                              mode:
                                                                                  jint)>,
    pub ReleaseDoubleArrayElements: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                   *mut JNIEnv,
                                                                               array:
                                                                                   jdoubleArray,
                                                                               elems:
                                                                                   *mut jdouble,
                                                                               mode:
                                                                                   jint)>,
    pub GetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jbooleanArray,
                                                                          start:
                                                                              jsize,
                                                                          l:
                                                                              jsize,
                                                                          buf:
                                                                              *mut jboolean)>,
    pub GetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jbyteArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *mut jbyte)>,
    pub GetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jcharArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *mut jchar)>,
    pub GetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jshortArray,
                                                                        start:
                                                                            jsize,
                                                                        len:
                                                                            jsize,
                                                                        buf:
                                                                            *mut jshort)>,
    pub GetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      array:
                                                                          jintArray,
                                                                      start:
                                                                          jsize,
                                                                      len:
                                                                          jsize,
                                                                      buf:
                                                                          *mut jint)>,
    pub GetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jlongArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *mut jlong)>,
    pub GetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jfloatArray,
                                                                        start:
                                                                            jsize,
                                                                        len:
                                                                            jsize,
                                                                        buf:
                                                                            *mut jfloat)>,
    pub GetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jdoubleArray,
                                                                         start:
                                                                             jsize,
                                                                         len:
                                                                             jsize,
                                                                         buf:
                                                                             *mut jdouble)>,
    pub SetBooleanArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          array:
                                                                              jbooleanArray,
                                                                          start:
                                                                              jsize,
                                                                          l:
                                                                              jsize,
                                                                          buf:
                                                                              *const jboolean)>,
    pub SetByteArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jbyteArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *const jbyte)>,
    pub SetCharArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jcharArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *const jchar)>,
    pub SetShortArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jshortArray,
                                                                        start:
                                                                            jsize,
                                                                        len:
                                                                            jsize,
                                                                        buf:
                                                                            *const jshort)>,
    pub SetIntArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      array:
                                                                          jintArray,
                                                                      start:
                                                                          jsize,
                                                                      len:
                                                                          jsize,
                                                                      buf:
                                                                          *const jint)>,
    pub SetLongArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       array:
                                                                           jlongArray,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *const jlong)>,
    pub SetFloatArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        array:
                                                                            jfloatArray,
                                                                        start:
                                                                            jsize,
                                                                        len:
                                                                            jsize,
                                                                        buf:
                                                                            *const jfloat)>,
    pub SetDoubleArrayRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                             *mut JNIEnv,
                                                                         array:
                                                                             jdoubleArray,
                                                                         start:
                                                                             jsize,
                                                                         len:
                                                                             jsize,
                                                                         buf:
                                                                             *const jdouble)>,
    pub RegisterNatives: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    clazz:
                                                                        jclass,
                                                                    methods:
                                                                        *const JNINativeMethod,
                                                                    nMethods:
                                                                        jint)
                                                   -> jint>,
    pub UnregisterNatives: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      clazz:
                                                                          jclass)
                                                     -> jint>,
    pub MonitorEnter: ::std::option::Option<unsafe extern "C" fn(env:
                                                                     *mut JNIEnv,
                                                                 obj: jobject)
                                                -> jint>,
    pub MonitorExit: ::std::option::Option<unsafe extern "C" fn(env:
                                                                    *mut JNIEnv,
                                                                obj: jobject)
                                               -> jint>,
    pub GetJavaVM: ::std::option::Option<unsafe extern "C" fn(env:
                                                                  *mut JNIEnv,
                                                              vm:
                                                                  *mut *mut JavaVM)
                                             -> jint>,
    pub GetStringRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                        *mut JNIEnv,
                                                                    str:
                                                                        jstring,
                                                                    start:
                                                                        jsize,
                                                                    len:
                                                                        jsize,
                                                                    buf:
                                                                        *mut jchar)>,
    pub GetStringUTFRegion: ::std::option::Option<unsafe extern "C" fn(env:
                                                                           *mut JNIEnv,
                                                                       str:
                                                                           jstring,
                                                                       start:
                                                                           jsize,
                                                                       len:
                                                                           jsize,
                                                                       buf:
                                                                           *mut ::std::os::raw::c_char)>,
    pub GetPrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                  *mut JNIEnv,
                                                                              array:
                                                                                  jarray,
                                                                              isCopy:
                                                                                  *mut jboolean)
                                                             ->
                                                                 *mut ::std::os::raw::c_void>,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                      *mut JNIEnv,
                                                                                  array:
                                                                                      jarray,
                                                                                  carray:
                                                                                      *mut ::std::os::raw::c_void,
                                                                                  mode:
                                                                                      jint)>,
    pub GetStringCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                          *mut JNIEnv,
                                                                      string:
                                                                          jstring,
                                                                      isCopy:
                                                                          *mut jboolean)
                                                     -> *const jchar>,
    pub ReleaseStringCritical: ::std::option::Option<unsafe extern "C" fn(env:
                                                                              *mut JNIEnv,
                                                                          string:
                                                                              jstring,
                                                                          cstring:
                                                                              *const jchar)>,
    pub NewWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject)
                                                    -> jweak>,
    pub DeleteWeakGlobalRef: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        ref_:
                                                                            jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(env:
                                                                       *mut JNIEnv)
                                                  -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<unsafe extern "C" fn(env:
                                                                            *mut JNIEnv,
                                                                        address:
                                                                            *mut ::std::os::raw::c_void,
                                                                        capacity:
                                                                            jlong)
                                                       -> jobject>,
    pub GetDirectBufferAddress: ::std::option::Option<unsafe extern "C" fn(env:
                                                                               *mut JNIEnv,
                                                                           buf:
                                                                               jobject)
                                                          ->
                                                              *mut ::std::os::raw::c_void>,
    pub GetDirectBufferCapacity: ::std::option::Option<unsafe extern "C" fn(env:
                                                                                *mut JNIEnv,
                                                                            buf:
                                                                                jobject)
                                                           -> jlong>,
    pub GetObjectRefType: ::std::option::Option<unsafe extern "C" fn(env:
                                                                         *mut JNIEnv,
                                                                     obj:
                                                                         jobject)
                                                    -> jobjectRefType>,
}
impl ::std::default::Default for JNINativeInterface_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNIEnv_ {
    pub functions: *const JNINativeInterface_,
}
impl ::std::default::Default for JNIEnv_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMOption {
    pub optionString: *mut ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for JavaVMOption {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
    _bindgen_padding_0_: [u8; 7usize],
}
impl ::std::default::Default for JavaVMInitArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *mut ::std::os::raw::c_char,
    pub group: jobject,
}
impl ::std::default::Default for JavaVMAttachArgs {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JNIInvokeInterface_ {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                      *mut JavaVM)
                                                 -> jint>,
    pub AttachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                            *mut JavaVM,
                                                                        penv:
                                                                            *mut *mut ::std::os::raw::c_void,
                                                                        args:
                                                                            *mut ::std::os::raw::c_void)
                                                       -> jint>,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                            *mut JavaVM)
                                                       -> jint>,
    pub GetEnv: ::std::option::Option<unsafe extern "C" fn(vm: *mut JavaVM,
                                                           penv:
                                                               *mut *mut ::std::os::raw::c_void,
                                                           version: jint)
                                          -> jint>,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<unsafe extern "C" fn(vm:
                                                                                    *mut JavaVM,
                                                                                penv:
                                                                                    *mut *mut ::std::os::raw::c_void,
                                                                                args:
                                                                                    *mut ::std::os::raw::c_void)
                                                               -> jint>,
}
impl ::std::default::Default for JNIInvokeInterface_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct JavaVM_ {
    pub functions: *const JNIInvokeInterface_,
}
impl ::std::default::Default for JavaVM_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
    pub static mut stdin: *mut _IO_FILE;
    pub static mut stdout: *mut _IO_FILE;
    pub static mut stderr: *mut _IO_FILE;
    pub static mut sys_nerr: ::std::os::raw::c_int;
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: __gnuc_va_list, arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: size_t) -> size_t;
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: size_t,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut size_t) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: size_t)
     -> ::std::os::raw::c_int;
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: size_t);
    pub fn setlinebuf(__stream: *mut FILE);
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: size_t,
                     __format: *const ::std::os::raw::c_char,
                     __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: __gnuc_va_list) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut size_t, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut size_t, __stream: *mut FILE) -> __ssize_t;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                 __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: size_t,
                  __n: size_t, __s: *mut FILE) -> size_t;
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: size_t,
                          __n: size_t, __stream: *mut FILE) -> size_t;
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: size_t, __n: size_t, __stream: *mut FILE)
     -> size_t;
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ftello(__stream: *mut FILE) -> __off_t;
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn clearerr_unlocked(__stream: *mut FILE);
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn flockfile(__stream: *mut FILE);
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn funlockfile(__stream: *mut FILE);
    pub fn JNI_GetDefaultJavaVMInitArgs(args: *mut ::std::os::raw::c_void)
     -> jint;
    pub fn JNI_CreateJavaVM(pvm: *mut *mut JavaVM,
                            penv: *mut *mut ::std::os::raw::c_void,
                            args: *mut ::std::os::raw::c_void) -> jint;
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize,
                                 arg3: *mut jsize) -> jint;
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void)
     -> jint;
    pub fn JNI_OnUnload(vm: *mut JavaVM,
                        reserved: *mut ::std::os::raw::c_void);
}
